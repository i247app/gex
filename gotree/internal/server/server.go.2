// gosvr_svr/internal/server/server.go
package server

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gorilla/mux" // Using gorilla mux
)

// Config holds server configuration.
type Config struct {
	Host        string
	Port        string
	CertFile    string
	KeyFile     string
	ReadTimeout  time.Duration
	WriteTimeout time.Duration
	IdleTimeout  time.Duration
}

// Server struct to hold server instance and other dependencies.
type Server struct {
	httpServer *http.Server
	router     *mux.Router // Use gorilla mux
	config     Config
}

// NewServer creates a new server instance.
func NewServer(cfg Config) *Server {
	r := mux.NewRouter() // Initialize gorilla mux Router
	return &Server{
		router: r,
		config: cfg,
		httpServer: &http.Server{
			Addr:         cfg.Host + ":" + cfg.Port,
			Handler:      r, // Use the gorilla mux Router
			ReadTimeout:  cfg.ReadTimeout,
			WriteTimeout: cfg.WriteTimeout,
			IdleTimeout:  cfg.IdleTimeout,
		},
	}
}

// Start starts the server.  This version uses gorilla/mux.
func (s *Server) Start() error {
	// Listen for shutdown signals
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	// Start the server in a separate goroutine
	go func() {
		fmt.Printf("Server running on %s\n", s.httpServer.Addr)
		var err error
		if s.config.CertFile != "" && s.config.KeyFile != "" {
			fmt.Println("Starting HTTPS server")
			err = s.httpServer.ListenAndServeTLS(s.config.CertFile, s.config.KeyFile)
		} else {
			fmt.Println("Starting HTTP server")
			err = s.httpServer.ListenAndServe()
		}

		if err != nil && err != http.ErrServerClosed {
			fmt.Printf("Server failed: %v\n", err)
		}
	}()

	// Wait for shutdown signal
	<-ctx.Done()
	fmt.Println("Shutting down server...")

	// Create a timeout context for graceful shutdown
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Shutdown the server
	if err := s.httpServer.Shutdown(shutdownCtx); err != nil {
		fmt.Printf("Server shutdown error: %v\n", err)
	}

	return nil
}

// RegisterHandler registers an HTTP handler for a specific path and method.
// This version uses gorilla/mux.
func (s *Server) RegisterHandler(path string, handler http.HandlerFunc, methods ...string) {
	s.router.HandleFunc(path).Methods(methods...)
}

// RegisterMiddleware registers middleware for the server.
func (s *Server) RegisterMiddleware(middleware func(http.Handler) http.Handler) {
	s.router.Use(middleware)
}

// GetRouter returns the router.  This is useful for registering
// handlers and middleware in other packages.
func (s *Server) Router() *mux.Router {
	return s.router
}
